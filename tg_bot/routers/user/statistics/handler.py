from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from tg_bot.filters import IsPrivate
from tg_bot.keyboards.statistics import (
    get_statistics_menu_keyboard,
    get_subject_selection_keyboard,
    get_time_period_keyboard,
)
from tg_bot.api_client import make_api_request

router = Router()
router.message.filter(IsPrivate())


class StatisticsStates(StatesGroup):

    selecting_subject = State()
    selecting_time_period = State()


@router.message(Command("statistics"))
async def show_statistics_menu(message: Message):

    await message.answer(
        "üìä –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=get_statistics_menu_keyboard(),
    )


@router.callback_query(F.data.startswith("stats_"))
async def handle_statistics_callback(callback: CallbackQuery, state: FSMContext):

    action = callback.data.split("_")[1]

    if action == "overall":
        response = await make_api_request(
            "GET", f"/statistics/student/{callback.from_user.id}/overall"
        )

        if response and "subjects" in response:
            text = "üìä –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            for subject in response["subjects"]:
                text += f"üìö {subject['name']}:\n"
                text += f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {subject['average']}\n"
                text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {subject['count']}\n\n"
            text += f"üìà –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {response['overall_average']}"

            await callback.message.edit_text(text)
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    elif action == "progress":
        response = await make_api_request("GET", f"/subjects")

        if response:
            await state.set_state(StatisticsStates.selecting_subject)
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
                reply_markup=get_subject_selection_keyboard(response),
            )
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

    elif action == "class":
        response = await make_api_request(
            "GET", f"/statistics/class/{callback.from_user.id}/subject/1"
        )

        if response and "distribution" in response:
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞:\n\n"
            text += f"üìö ID –ø—Ä–µ–¥–º–µ—Ç–∞: {response['subject_id']}\n"
            text += f"üë• –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {response['total_grades']}\n"
            text += f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–ª–∞—Å—Å–∞: {response['average']}\n\n"
            text += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:\n"

            for grade in response["distribution"]:
                text += f"–û—Ü–µ–Ω–∫–∞ {grade['grade']}: {grade['count']} ({grade['percentage']}%)\n"

            await callback.message.edit_text(text)
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–∞")


@router.callback_query(
    StatisticsStates.selecting_subject, F.data.startswith("subject_")
)
async def handle_subject_selection(callback: CallbackQuery, state: FSMContext):

    subject_id = int(callback.data.split("_")[1])
    await state.update_data(selected_subject=subject_id)

    await state.set_state(StatisticsStates.selecting_time_period)
    await callback.message.edit_text(
        "Select time period:", reply_markup=get_time_period_keyboard()
    )


@router.callback_query(
    StatisticsStates.selecting_time_period, F.data.startswith("period_")
)
async def handle_time_period_selection(callback: CallbackQuery, state: FSMContext):

    days = int(callback.data.split("_")[1])
    data = await state.get_data()
    subject_id = data["selected_subject"]

    response = await make_api_request(
        "GET",
        f"/statistics/student/{callback.from_user.id}/progress",
        params={"subject_id": subject_id, "days": days},
    )

    if response and "progress" in response:
        text = f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n\n"

        for grade in response["progress"]:
            text += f"üìÖ {grade['date']}\n"
            text += f"–û—Ü–µ–Ω–∫–∞: {grade['value']}\n"
            if grade["comment"]:
                text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {grade['comment']}\n"
            text += "\n"

        await callback.message.edit_text(text)
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ")

    await state.clear()
