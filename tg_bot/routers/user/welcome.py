import logging
import tempfile

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, FSInputFile
from aiogram.types import InputFile
from io import BytesIO
from aiogram.types import BufferedInputFile


from tg_bot.filters import IsPrivate, IsPrivateCallback
from tg_bot import keyboards
from tg_bot.config import httpx_client
from tg_bot.common import updateUserDecorator


router = Router()
router.message.filter(IsPrivate())
router.callback_query.filter(IsPrivateCallback())


async def getClassDescription(_class_resp: dict) -> str:
    _school_resp = (await httpx_client.get("school", params={"uuid": _class_resp["school_uuid"]})).json()
    return f"–®–∫–æ–ª–∞: {_school_resp['facility_name']}\n" + f"–ö–ª–∞—Å—Å: {_class_resp['class_name']}\n" + f"–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è: {_class_resp['start_year']}\n"


@router.message(Command("start"))
@updateUserDecorator
async def start(msg: Message, state: FSMContext):
    user_class = await httpx_client.get("user/class", params={"chat_id": msg.chat.id})
    if user_class.status_code == 200:
        class_description = await getClassDescription(user_class.json())
        text = "–¢—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞—Å—Å–µ:\n\n" + class_description
        await msg.answer(text)
        return

    class_uuid_to_join = msg.text.replace("/start", "").strip()
    if not class_uuid_to_join:
        await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É —É—á–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å!")
        return

    class_resp = await httpx_client.get("class", params={"uuid": class_uuid_to_join})
    if class_resp.status_code == 200:
        class_resp = class_resp.json()
        class_description = await getClassDescription(class_resp)

        text = f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞—Å—Å.\n\n" + class_description
        await msg.answer(
            text,
            reply_markup=keyboards.user.welcome.keyboardAcceptInvite(class_uuid_to_join)
        )
    else:
        logging.info(f"start function {class_resp.status_code} {class_resp.text}")
        await msg.answer(f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —É—á–∏—Ç–µ–ª—é –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π")


@router.callback_query(F.data.startswith("join|"))
@updateUserDecorator
async def joinClass(call: CallbackQuery, state: FSMContext):
    class_uuid = call.data.replace("join|", "")
    data = (await state.get_data())
    logging.info(data)
    resp = await httpx_client.post("class/student_join", params={"user_uuid": data["user_uuid"],
                                                                 "class_uuid": class_uuid})
    if resp.status_code == 409:
        await call.message.answer(f"–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ")
    elif resp.status_code == 200:
        class_description = await getClassDescription(resp.json())
        await call.message.answer(f"–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª–∞—Å—Å—É\n\n{class_description}")
    else:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {resp.status_code, resp.text}")


@router.message(Command("my_grades"))
@updateUserDecorator
async def showMyGrades(msg: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
        marks_resp = await httpx_client.get("mark", params={"chat_id": msg.chat.id})
        marks = marks_resp.json()

        if not marks:
            await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.")
            return

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        subject_marks = {}
        for mark in marks:
            subject = mark["discipline"]
            subject_marks.setdefault(subject, []).append(mark["mark"])

        message = "üìö <b>–¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏:</b>\n\n"
        for subject, grades in subject_marks.items():
            grades_str = ", ".join(str(g) for g in grades)
            message += f"<b>{subject}</b>: {grades_str}\n"

        await msg.answer(message, parse_mode="HTML")

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_resp = await httpx_client.get("user/plot_subject_averages", params={"chat_id": msg.chat.id})
        if chart_resp.status_code == 200:
            from io import BytesIO
            from aiogram.types import InputFile

            buf = BytesIO(chart_resp.content)
            buf.name = "grades.png"
            await msg.answer_photo(
                photo=BufferedInputFile(buf.read(), filename="grades.png"),
                caption="–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º üìä"
            )
        else:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")

    except Exception as e:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        raise e


@router.message(Command("statistics"))
@updateUserDecorator
async def showStatistics(msg: Message, state: FSMContext):
    stats_resp = await httpx_client.get("/teacher/statistics")
    if stats_resp.status_code != 200:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    stats = stats_resp.json()

    if not stats:
        await msg.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.")
        return

    message = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º:</b>\n\n"
    for item in stats:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã
        school_resp = await httpx_client.get("/school", params={"uuid": item["school_uuid"]})
        if school_resp.status_code == 200:
            school_name = school_resp.json()["facility_name"]
        else:
            school_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —à–∫–æ–ª–∞"

        message += f"<b>{school_name}</b>\n"
        message += f"–ö–ª–∞—Å—Å: {item['class_name']} ({item['start_year']} –≥.)\n"

        if not item["disciplines"]:
            message += "   ‚Äî –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫\n\n"
            continue

        for disc in item["disciplines"]:
            message += f"   ‚Ä¢ {disc['discipline']}: —Å—Ä. –±–∞–ª–ª {disc['average_mark']} (–≤—Å–µ–≥–æ {disc['marks_count']})\n"
        message += "\n"

    await msg.answer(message, parse_mode="HTML")


@router.message(Command("analysis"))
@updateUserDecorator
async def show_prediction(msg: Message, state: FSMContext):
    try:
        # üìä –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
        resp = await httpx_client.get("/user/predict_success", params={"chat_id": msg.chat.id})
        if resp.status_code != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        data = resp.json()

        if data.get("status") == "unknown":
            await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        else:
            emoji = {
                "—É—Å–ø–µ—à–Ω—ã–π": "üü¢",
                "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π": "üî¥"
            }.get(data["status"], "‚ùì")

            text = (
                f"<b>üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ–ª—É–≥–æ–¥–∏–µ</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: <b>{emoji} {data['status']}</b>\n"
                f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{int(data['confidence'] * 100)}%</b>\n"
                f"–û—Ü–µ–Ω–æ–∫ –≤—Å–µ–≥–æ: <b>{data['total_marks']}</b>\n"
                f"–¢—Ä–æ–µ–∫ –∏ –Ω–∏–∂–µ: <b>{data['bad_marks']}</b>\n\n"
                f"{data['message']}"
            )
            await msg.answer(text, parse_mode="HTML")

        # üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–¥–µ–ª—è–º ‚Äî –≥—Ä–∞—Ñ–∏–∫
        plot_resp = await httpx_client.get("/user/plot_progression", params={"chat_id": msg.chat.id})
        if plot_resp.status_code != 200:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            tmp.write(plot_resp.content)
            tmp_path = tmp.name

        await msg.answer_photo(photo=FSInputFile(tmp_path), caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º")

    except Exception as e:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        raise e  # –∏–ª–∏ –ª–æ–≥–∏—Ä—É–π –∫–∞–∫ –Ω—É–∂–Ω–æ


@router.message()
@updateUserDecorator
async def showMenu(msg: Message, state: FSMContext):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É —É—á–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å!")

@router.callback_query(F.data == "menu")
@updateUserDecorator
async def showMenuCQ(call: CallbackQuery, state: FSMContext):
    await showMenu(call.message, state)

