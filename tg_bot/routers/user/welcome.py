import logging
from uuid import UUID

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup

from tg_bot.filters import IsPrivate, IsPrivateCallback
from tg_bot import keyboards
from tg_bot.config import httpx_client
from tg_bot.common import updateUserDecorator
from app.db.schemas.user import Roles

router = Router()
router.message.filter(IsPrivate())
router.callback_query.filter(IsPrivateCallback())

async def get_user_classes(user_uuid: str) -> list:
    """Get all classes for a user"""
    resp = await httpx_client.get(f"schools/users/{user_uuid}/classes")
    if resp.status_code == 200:
        return resp.json()
    return []

async def get_class_details(class_uuid: str) -> dict:
    """Get detailed information about a class"""
    resp = await httpx_client.get(f"schools/classes/{class_uuid}")
    if resp.status_code == 200:
        return resp.json()
    return {}

async def get_class_teachers(class_uuid: str) -> list:
    """Get all teachers in a class"""
    resp = await httpx_client.get(f"schools/classes/{class_uuid}/teachers")
    if resp.status_code == 200:
        return resp.json()
    return []

async def get_class_students(class_uuid: str) -> list:
    """Get all students in a class"""
    resp = await httpx_client.get(f"schools/classes/{class_uuid}/students")
    if resp.status_code == 200:
        return resp.json()
    return []

@router.message(Command("start"))
@updateUserDecorator
async def start(msg: Message, state: FSMContext):
    # Get user data
    data = await state.get_data()
    if "user_uuid" not in data:
        await msg.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        return

    # Get command arguments
    args = msg.text.split()
    if len(args) > 1:  # Has class UUID
        try:
            class_uuid = UUID(args[1])
            # Get class info
            class_resp = await httpx_client.get(f"schools/classes/{str(class_uuid)}")
            if class_resp.status_code == 200:
                class_info = class_resp.json()
                await msg.answer(
                    f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. "
                    f"–¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞—Å—Å: {class_info['class_name']}",
                    reply_markup=keyboards.user.welcome.keyboardAcceptInvite(str(class_uuid))
                )
            else:
                await msg.answer(
                    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. "
                    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, "
                    "–æ–±—Ä–∞—Ç–∏—Å—å –∫ —É—á–∏—Ç–µ–ª—é –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π"
                )
            return
        except ValueError:
            await msg.answer(
                "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. "
                "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, "
                "–æ–±—Ä–∞—Ç–∏—Å—å –∫ —É—á–∏—Ç–µ–ª—é –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π"
            )
            return

    # Get user's classes
    classes = await get_user_classes(data["user_uuid"])
    
    if not classes:
        await msg.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. "
            "–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É —É—á–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å!"
        )
        return

    # Build message with user's classes and details
    message = ["–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n"]
    
    for class_info in classes:
        message.append(f"\nüìö –ö–ª–∞—Å—Å: {class_info['class_name']}")
        
        # Get class details
        class_details = await get_class_details(class_info['uuid'])
        if class_details:
            message.append(f"üè´ –®–∫–æ–ª–∞: {class_details.get('school', {}).get('facility_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        
        # Get teachers
        teachers = await get_class_teachers(class_info['uuid'])
        if teachers:
            message.append("üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—è:")
            for teacher in teachers:
                message.append(f"  ‚Ä¢ {teacher['name']}")
        
        # Get students count
        students = await get_class_students(class_info['uuid'])
        if students:
            message.append(f"üë• –£—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ: {len(students)}")
        
        # Add class invite link for teachers
        if msg.from_user.id in [t['chat_id'] for t in teachers]:
            invite_link = await httpx_client.get(f"schools/classes/{class_info['uuid']}/invite_link")
            if invite_link.status_code == 200:
                message.append(f"\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_link.text}")

    await msg.answer("\n".join(message))

@router.callback_query(F.data.startswith("join|"))
@updateUserDecorator
async def joinClass(call: CallbackQuery, state: FSMContext):
    try:
        class_uuid = call.data.replace("join|", "")
        data = await state.get_data()
        
        if "user_uuid" not in data:
            await call.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        resp = await httpx_client.post(
            f"schools/classes/{class_uuid}/join",
            params={
                "user_uuid": data["user_uuid"]
            }
        )

        if resp.status_code == 409:
            await call.message.answer("–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ")
        elif resp.status_code == 200:
            class_info = resp.json()
            await call.message.answer(f"–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª–∞—Å—Å—É {class_info['class_name']}")
        else:
            await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {resp.status_code}, {resp.text}")
    except Exception as e:
        logging.error(f"Error joining class: {str(e)}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–ª–∞—Å—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")