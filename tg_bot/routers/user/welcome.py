import logging
from uuid import UUID

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup

from tg_bot.filters import IsPrivate, IsPrivateCallback
from tg_bot import keyboards
from tg_bot.config import httpx_client
from tg_bot.common import updateUserDecorator
from app.db.schemas.user import Roles

router = Router()
router.message.filter(IsPrivate())
router.callback_query.filter(IsPrivateCallback())

async def get_user_classes(user_uuid: str) -> list:
    """Get all classes for a user"""
    resp = await httpx_client.get(f"schools/users/{user_uuid}/classes")
    if resp.status_code == 200:
        return resp.json()
    return []

async def get_class_details(class_uuid: str) -> dict:
    """Get detailed information about a class"""
    resp = await httpx_client.get(f"schools/classes/{class_uuid}")
    if resp.status_code == 200:
        return resp.json()
    return {}

async def get_class_teachers(class_uuid: str) -> list:
    """Get all teachers in a class"""
    resp = await httpx_client.get(f"schools/classes/{class_uuid}/teachers")
    if resp.status_code == 200:
        return resp.json()
    return []

async def get_class_students(class_uuid: str) -> list:
    """Get all students in a class"""
    resp = await httpx_client.get(f"schools/classes/{class_uuid}/students")
    if resp.status_code == 200:
        return resp.json()
    return []

@router.message(Command("start"))
@updateUserDecorator
async def start(msg: Message, state: FSMContext):
    # Get user data
    data = await state.get_data()
    if "user_uuid" not in data:
        await msg.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        return

    # Get command arguments
    args = msg.text.split()
    if len(args) > 1:  # Has invitation code
        try:
            # Parse invitation code (format: invite|invitation_uuid)
            parts = args[1].split('|')
            if len(parts) != 2 or parts[0] != "invite":
                raise ValueError("Invalid invitation format")
            
            invitation_uuid = UUID(parts[1])
            
            # Get invitation details
            invite_resp = await httpx_client.get(f"invitations/{str(invitation_uuid)}")
            if invite_resp.status_code == 200:
                invitation = invite_resp.json()
                
                # Customize message based on invitation type
                if invitation["type"] == "class_student":
                    message = (
                        f"–ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞—Å—Å: {invitation['class_name']}\n"
                        "–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏."
                    )
                elif invitation["type"] == "class_teacher":
                    message = (
                        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∏—Ç–µ–ª—è –≤ –∫–ª–∞—Å—Å: {invitation['class_name']}\n"
                        "–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞—Å—Å–æ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —É—á–µ–Ω–∏–∫–æ–≤."
                    )
                elif invitation["type"] == "subject_teacher":
                    message = (
                        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç: {invitation['subject_name']}\n"
                        "–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é –ø–æ —Å–≤–æ–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."
                    )
                elif invitation["type"] == "parent_child":
                    message = (
                        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é —É—á–µ–Ω–∏–∫–∞: {invitation['child_name']}\n"
                        "–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞."
                    )
                else:
                    message = (
                        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                        "–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º."
                    )
                
                # Add expiration info
                message += f"\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {invitation['expires_at']}"
                
                await msg.answer(
                    message,
                    reply_markup=keyboards.user.welcome.keyboardAcceptInvite(str(invitation_uuid))
                )
            else:
                await msg.answer(
                    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n"
                    "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π."
                )
            return
        except ValueError:
            await msg.answer(
                "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n"
                "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π."
            )
            return

    # Get user's classes
    classes = await get_user_classes(data["user_uuid"])
    
    if not classes:
        await msg.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —à–∫–æ–ª—ã."
        )
        return

    # Build message with user's classes and details
    message = ["–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–æ–≤ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n"]
    
    for class_info in classes:
        message.append(f"\nüìö –ö–ª–∞—Å—Å: {class_info['class_name']}")
        
        # Get class details
        class_details = await get_class_details(class_info['uuid'])
        if class_details:
            message.append(f"üè´ –®–∫–æ–ª–∞: {class_details.get('school', {}).get('facility_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        
        # Get teachers
        teachers = await get_class_teachers(class_info['uuid'])
        if teachers:
            message.append("üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—è:")
            for teacher in teachers:
                role_emoji = "üë®‚Äçüè´" if teacher['role'] == Roles.homeroom_teacher else "üìö"
                message.append(f"  ‚Ä¢ {role_emoji} {teacher['name']}")
        
        # Get students count
        students = await get_class_students(class_info['uuid'])
        if students:
            message.append(f"üë• –£—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ: {len(students)}")
        
        # Add invitation options based on user role
        user_role = await get_user_role(data["user_uuid"])
        if user_role in [Roles.principal, Roles.deputy_principal, Roles.homeroom_teacher]:
            message.append("\nüì® –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:")
            message.append("  ‚Ä¢ /invite_student - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
            message.append("  ‚Ä¢ /invite_teacher - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∏—Ç–µ–ª—è")
            if user_role in [Roles.principal, Roles.deputy_principal]:
                message.append("  ‚Ä¢ /invite_parent - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è")

    await msg.answer("\n".join(message))

@router.callback_query(F.data.startswith("join|"))
@updateUserDecorator
async def joinClass(call: CallbackQuery, state: FSMContext):
    try:
        invitation_uuid = call.data.replace("join|", "")
        data = await state.get_data()
        
        if "user_uuid" not in data:
            await call.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        resp = await httpx_client.post(
            f"invitations/{invitation_uuid}/accept",
            params={
                "user_uuid": data["user_uuid"]
            }
        )

        if resp.status_code == 409:
            await call.message.answer("–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
        elif resp.status_code == 200:
            invitation = resp.json()
            
            # Customize success message based on invitation type
            if invitation["type"] == "class_student":
                message = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª–∞—Å—Å—É {invitation['class_name']}!"
            elif invitation["type"] == "class_teacher":
                message = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª–∞—Å—Å—É {invitation['class_name']} –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∏—Ç–µ–ª—è!"
            elif invitation["type"] == "subject_teacher":
                message = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–µ–¥–º–µ—Ç—É {invitation['subject_name']}!"
            elif invitation["type"] == "parent_child":
                message = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ø—Ä–æ—Ñ–∏–ª—é —É—á–µ–Ω–∏–∫–∞ {invitation['child_name']}!"
            else:
                message = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–∏—Å—Ç–µ–º–µ!"
            
            message += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
            await call.message.answer(message)
        else:
            await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {resp.status_code}, {resp.text}")
    except Exception as e:
        logging.error(f"Error accepting invitation: {str(e)}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")